// <auto-generated />
using System;
using LyteChat.Server.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LyteChat.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroup", b =>
                {
                    b.Property<long>("ChatGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ChatGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedOn")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatGroupId");

                    b.HasIndex("ChatGroupName")
                        .IsUnique();

                    b.ToTable("ChatGroups");

                    b.HasData(
                        new
                        {
                            ChatGroupId = 1L,
                            ChatGroupName = "All Chat",
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 593, DateTimeKind.Local).AddTicks(3674),
                            Uuid = new Guid("9a9f7169-e7c3-42d7-9eb2-d95ffddff45c")
                        },
                        new
                        {
                            ChatGroupId = 2L,
                            ChatGroupName = "second chat group",
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 595, DateTimeKind.Local).AddTicks(5574),
                            Uuid = new Guid("d4d4f5aa-e176-4030-84f3-4b86dd5bb6c4")
                        },
                        new
                        {
                            ChatGroupId = 3L,
                            ChatGroupName = "third chat group",
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 595, DateTimeKind.Local).AddTicks(5600),
                            Uuid = new Guid("ad43fcc0-1f63-4a74-98cb-654e2ecc99b0")
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroupUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ChatGroupId");

                    b.HasIndex("ChatGroupId");

                    b.ToTable("ChatGroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("38d0925d-10be-4120-a4c0-f4162f01a108"),
                            ChatGroupId = 1L,
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 596, DateTimeKind.Local).AddTicks(539),
                            Uuid = new Guid("c7bd537b-af58-419e-a4f2-5142f2b0d22d")
                        },
                        new
                        {
                            UserId = new Guid("b16625c6-ad67-4510-88f1-a63b1f614129"),
                            ChatGroupId = 1L,
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 596, DateTimeKind.Local).AddTicks(1362),
                            Uuid = new Guid("1dfc2670-4138-4219-904b-228f02a5ec77")
                        },
                        new
                        {
                            UserId = new Guid("10560706-69e6-47ad-b67a-9b20b59fc903"),
                            ChatGroupId = 1L,
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 596, DateTimeKind.Local).AddTicks(1381),
                            Uuid = new Guid("8aa8598a-e74b-4fb5-8200-3bcdb067f0a2")
                        },
                        new
                        {
                            UserId = new Guid("0d7ed384-a659-4981-96ba-dddf04ae4917"),
                            ChatGroupId = 1L,
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 596, DateTimeKind.Local).AddTicks(1384),
                            Uuid = new Guid("72603de7-8fcc-4d85-9c7d-0e7e78a293b2")
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatMessage", b =>
                {
                    b.Property<long>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ChatGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            ChatMessageId = 1L,
                            ChatGroupId = 1L,
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 595, DateTimeKind.Local).AddTicks(7239),
                            Message = "first message",
                            UserId = new Guid("38d0925d-10be-4120-a4c0-f4162f01a108"),
                            Uuid = new Guid("bb53afec-ecf0-4b6a-b56a-c9c6ca6b8b85")
                        },
                        new
                        {
                            ChatMessageId = 2L,
                            ChatGroupId = 2L,
                            CreatedOn = new DateTime(2021, 1, 18, 11, 27, 58, 595, DateTimeKind.Local).AddTicks(8953),
                            Message = "second message",
                            UserId = new Guid("b16625c6-ad67-4510-88f1-a63b1f614129"),
                            Uuid = new Guid("43799d6a-2ad8-4f33-95db-60aae054bdf5")
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("659cad2c-f491-4a57-bcba-bec21345b2b9"),
                            ConcurrencyStamp = "f29a82d8-b707-4e41-9012-84726d7bb6ec",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("29369904-f3a0-4d0f-b9e6-4f177d9e8f41"),
                            ConcurrencyStamp = "f8c44720-275f-4b07-8262-dff687105542",
                            Name = "AnonymousUser",
                            NormalizedName = "ANONYMOUSUSER"
                        },
                        new
                        {
                            Id = new Guid("d3417a26-4bc9-49bb-ac10-294a2f7e0125"),
                            ConcurrencyStamp = "cc9a0941-1d2c-4302-9b1e-9ba2856a9cc6",
                            Name = "AuthenticatedUser",
                            NormalizedName = "AUTHENTICATEDUSER"
                        });
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38d0925d-10be-4120-a4c0-f4162f01a108"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b8cc487-d626-4025-85a1-3dbd0ebaa7d9",
                            Email = "admin@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPMPZQYAh9oMX8Wm3DLxCQZ9EFVk33FI/b64bWgtAzitPDv4FinSUd7srr+kLL7gnA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b16625c6-ad67-4510-88f1-a63b1f614129"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a0862a8-9110-45b9-9fa4-ce6bb293d6bf",
                            Email = "anonymous@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANONYMOUS@EMAIL.COM",
                            NormalizedUserName = "ANONYMOUS",
                            PasswordHash = "AQAAAAEAACcQAAAAEAn+UX8+DdT2cSlw3z0p6tf29qIx0k7is5F64EQ1lqepjmTO4sfWzfCgJpKL8Y/Ymg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Anonymous"
                        },
                        new
                        {
                            Id = new Guid("10560706-69e6-47ad-b67a-9b20b59fc903"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4ed3079-bd4c-43b9-92ec-a03d5640cce0",
                            Email = "bob@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@EMAIL.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfynyy2sQuUZXH2CvVQ8sAkBOwVix0ai/poe45yipSmGj2tgHHfuZScEG5mQx2TyQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        },
                        new
                        {
                            Id = new Guid("0d7ed384-a659-4981-96ba-dddf04ae4917"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3f9f538-e751-405a-811d-5327db03251e",
                            Email = "alice@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE@EMAIL.COM",
                            NormalizedUserName = "ALICE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFZPrvESj7TqTJ1xH4S6h2AA7K0Hda0LE73w8p6jvVvq4Indq/BAZMskRDmo3YLOKQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Alice"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("38d0925d-10be-4120-a4c0-f4162f01a108"),
                            RoleId = new Guid("659cad2c-f491-4a57-bcba-bec21345b2b9")
                        },
                        new
                        {
                            UserId = new Guid("b16625c6-ad67-4510-88f1-a63b1f614129"),
                            RoleId = new Guid("29369904-f3a0-4d0f-b9e6-4f177d9e8f41")
                        },
                        new
                        {
                            UserId = new Guid("10560706-69e6-47ad-b67a-9b20b59fc903"),
                            RoleId = new Guid("d3417a26-4bc9-49bb-ac10-294a2f7e0125")
                        },
                        new
                        {
                            UserId = new Guid("0d7ed384-a659-4981-96ba-dddf04ae4917"),
                            RoleId = new Guid("d3417a26-4bc9-49bb-ac10-294a2f7e0125")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroupUser", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupUsers")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LyteChat.Server.Data.Models.User", "User")
                        .WithMany("ChatGroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.ChatGroup", "ChatGroup")
                        .WithMany("Messages")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LyteChat.Server.Data.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LyteChat.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.ChatGroup", b =>
                {
                    b.Navigation("ChatGroupUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("LyteChat.Server.Data.Models.User", b =>
                {
                    b.Navigation("ChatGroupUsers");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
