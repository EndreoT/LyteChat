@page "/chatgroup"
@using LyteChat.Shared.DataTransferObject
@using LyteChat.Shared.Communication
@using Microsoft.AspNetCore.Authorization
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@implements IDisposable
@attribute [Authorize(Roles = "AuthenticatedUser")]

<div class="container-fluid">
    <div class="card bg-light mb-3">
        <h1 class="card-header text-center">Chat Groups</h1>
        <div class="card-body">
            <div class="card">
                @if (CreateFailure)
                {
                    <div class="alert alert-danger">@CreateFailureMessage</div>
                }
                <div class="card-body">
                    <h5 class="card-title text-center">Create a Chat Group</h5>
                    <EditForm @ref="createchatgroupform" Model="ChatGroupModel" OnValidSubmit="SubmitCreateChatGroup">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Chat Group Name</label>
                            <InputText class="form-control" @bind-Value="ChatGroupModel.ChatGroupName" />
                        </div>

                        <button disabled="@(ChatGroupModel.ChatGroupName.Length == 0)" type="submit" class="btn btn-outline-primary btn-sm">Create</button>
                    </EditForm>
                </div>
            </div>

            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Uuid</th>
                        <th scope="col">Membership status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (ChatGroupDTO chatGroup in StateContainer.AllChatGroups)
                    {
                        <tr>
                            <td>@chatGroup.ChatGroupName</td>
                            <td>@chatGroup.Uuid</td>
                            @if (StateContainer.ChatGroupsForUser.ContainsKey(chatGroup.Uuid))
                            {
                                <td><button class="btn btn-outline-danger" @onclick="(() => ModifyGroupMembership(false, chatGroup.Uuid))">Leave Group</button></td>
                            }
                            else
                            {
                                <td><button class="btn btn-outline-info" @onclick="(() => ModifyGroupMembership(true, chatGroup.Uuid))">Join Group</button></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code {
    private bool CreateFailure;
    private string CreateFailureMessage;
    private EditForm createchatgroupform { get; set; }
    private ChatGroupDTO ChatGroupModel = new ChatGroupDTO { ChatGroupName = "" };

    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }

    private async Task SubmitCreateChatGroup()
    {
        ChatGroupResponse createRes = await StateContainer.CreateChatGroup(ChatGroupModel);
        if (createRes.Success)
        {
            //Direct user to the chat group
            NavigationManager.NavigateTo($"/chatgroup/{createRes.ChatGroupDTO.Uuid}");
        }
        else
        {
            CreateFailure = true;
            CreateFailureMessage = createRes.ErrorMessage;
        }
    }

    private async Task ModifyGroupMembership(bool joinGroup, Guid groupUuid)
    {
        await StateContainer.ModifyGroupMembership(joinGroup, groupUuid);
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

}
